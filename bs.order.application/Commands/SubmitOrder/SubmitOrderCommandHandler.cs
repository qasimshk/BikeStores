using bs.component.integrations.Customers;
using bs.component.integrations.Requests;
using bs.order.domain.Enums;
using bs.order.domain.Models;
using MassTransit;
using MediatR;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace bs.order.application.Commands.SubmitOrder
{
    public class SubmitOrderCommandHandler : IRequestHandler<SubmitOrderCommand, SubmitOrderResultDto>
    {
        private readonly IPublishEndpoint _publishEndpoint;
        private List<ICardDetail> _cardDetails;
        
        public SubmitOrderCommandHandler(IPublishEndpoint publishEndpoint)
        {
            _publishEndpoint = publishEndpoint;
        }

        public async Task<SubmitOrderResultDto> Handle(SubmitOrderCommand request, CancellationToken cancellationToken)
        {
            var transactionalPaymentRef = await GetTransactionalPayment(request.Customer.CardDetails, request.Payment.PaymentType);
            
            if (request.Customer.CardDetails != null)
            {
                _cardDetails = new List<ICardDetail>
                {
                    new AddCardDetail
                    {
                        CardHolderName = request.Customer.CardDetails.CardHolderName,
                        CardNumber = long.Parse(request.Customer.CardDetails.CardNumber),
                        CardType = (int) request.Customer.CardDetails.CardType,
                        Expiry = request.Customer.CardDetails.Expiration,
                        SecurityNumber = request.Customer.CardDetails.SecurityNumber
                    }
                };
            }
            
            await _publishEndpoint.Publish<IOrderSubmit>(new OrderSubmit
            {
                CorrelationId = request.CorrelationId,
                Customer = new CreateCustomer
                {
                    CorrelationId = request.CorrelationId,
                    FirstName = request.Customer.FirstName,
                    LastName = request.Customer.LastName,
                    Dob = request.Customer.DateOfBirth,
                    EmailAddress = request.Customer.EmailAddress,
                    PhoneNumber = request.Customer.PhoneNumber,
                    BillingAddress = new AddAddress
                    {
                        City = request.Customer.BillingAddress.City,
                        Street = request.Customer.BillingAddress.Street,
                        PostCode = request.Customer.BillingAddress.PostCode,
                        Country = request.Customer.BillingAddress.Country
                    },
                    Consents = new AddConsent
                    {
                        ContactByCall = request.Customer.CustomerConsent.ContactByCall,
                        ContactByEmail = request.Customer.CustomerConsent.ContactByEmail,
                        ContactByPost = request.Customer.CustomerConsent.ContactByPost,
                        ContactByText = request.Customer.CustomerConsent.ContactByText
                    },
                    CardDetails = _cardDetails
                },
                Payment = default,
                Order = default
            }, cancellationToken);

            return new SubmitOrderResultDto
            {
                CorrelationId = request.CorrelationId,
                PaymentRef = transactionalPaymentRef,
                OrderRef = request.OrderRef,
                OrderStatus = OrderStatus.Paid.ToString()
            };
        }

        private async Task<Guid> GetTransactionalPayment(CardDetailsDto cardDetails, PaymentType paymentType)
        {
            var transactionPaymentRef = Guid.NewGuid();

            if (paymentType == PaymentType.Cash)
            {
                return transactionPaymentRef;
            }
            
            // TODO: Transaction Reference will be generated by the third party payment provider.
            await Task.Delay(1500);
            return transactionPaymentRef;
        }
    }
}
