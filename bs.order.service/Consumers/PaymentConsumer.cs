using bs.component.integrations.Payments;
using bs.order.domain.Entities;
using bs.order.domain.Enums;
using bs.order.domain.Repositories;
using bs.order.service.Events;
using MassTransit;
using Newtonsoft.Json;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace bs.order.service.Consumers
{
    public class PaymentConsumer : IConsumer<IPaymentProcessEvent>
    {
        private readonly IPaymentRepository _paymentRepository;
        
        public PaymentConsumer(IPaymentRepository paymentRepository)
        {
            _paymentRepository = paymentRepository;
        }

        public async Task Consume(ConsumeContext<IPaymentProcessEvent> context)
        {   

            // TODO: Transaction Reference will be generated by the third party payment provider.
            var transactionRef = Guid.NewGuid();

            var payment = new Payment(context.Message.CustomerId
                , context.Message.Amount
                , (PaymentType) context.Message.PaymentType
                , transactionRef
                , context.Message.CardDetailsId);

            if (context.Message.PaymentType == (int)PaymentType.Card)
            {
                var cardDetail = JsonConvert.DeserializeObject<CardDetailEvent>(context.Message.JsonCardDetails);

                if (cardDetail.CardHolderName.Contains("Test"))
                {
                    payment.MarkTransactionAsDeclined();
                }
                else
                {
                    payment.MarkTransactionSuccessful();
                }
            }
            else
            {
                payment.MarkTransactionSuccessful();
            }

            _paymentRepository.Add(payment);
            await _paymentRepository.UnitOfWork.SaveEntitiesAsync();

            var result = (await _paymentRepository.FindByConditionAsync(p => p.PaymentRef == transactionRef)).Single();

            if (result.Status == TransactionStatus.Successful)
            {
                await context.RespondAsync<IPaymentCreatedEvent>(new PaymentCreatedEvent
                {
                    CorrelationId = context.Message.CorrelationId,
                    PaymentId = result.Id
                });
            }
        }
    }
}
